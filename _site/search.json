[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Attention!\n\n\n\nPlease open this link in a new tab and let it load, this may take a few minutes.\n\n\nThis is a short programming activity to teach you how to create plots using Python, in a real-life programming environment known as a Jupyter notebook. The session should run 60-90 minutes total.\n\n\n\n\nTake your time and read all the instructions on this page and the following pages - if you skip forward you may miss important information that can help you later\nTo copy code more easily you can highlight it and press ‘ctrl’ + ‘c’ on your keyboard at the same time\nTo paste code you can use the keyboard shortcut ‘ctrl’ + ‘v’\n\n\n\n\nFor much of this activity you will be copying blocks of code from the instructions and pasting them into the Jupyter notebook. An example of what a code block looks like below. You can copy the code either by highlighting it and copying OR if you hover over the block a little clipboard symbol will appear to the right. If you click it it will copy the code. Try and copy the example block below.\n\n\nCode\nprint(\"I am a Python code block.\")\n\n\nI am a Python code block."
  },
  {
    "objectID": "index.html#before-beginning",
    "href": "index.html#before-beginning",
    "title": "Introduction",
    "section": "",
    "text": "Attention!\n\n\n\nPlease open this link in a new tab and let it load, this may take a few minutes.\n\n\nThis is a short programming activity to teach you how to create plots using Python, in a real-life programming environment known as a Jupyter notebook. The session should run 60-90 minutes total."
  },
  {
    "objectID": "index.html#general-guidance-and-tips",
    "href": "index.html#general-guidance-and-tips",
    "title": "Introduction",
    "section": "",
    "text": "Take your time and read all the instructions on this page and the following pages - if you skip forward you may miss important information that can help you later\nTo copy code more easily you can highlight it and press ‘ctrl’ + ‘c’ on your keyboard at the same time\nTo paste code you can use the keyboard shortcut ‘ctrl’ + ‘v’"
  },
  {
    "objectID": "index.html#running-the-code",
    "href": "index.html#running-the-code",
    "title": "Introduction",
    "section": "",
    "text": "For much of this activity you will be copying blocks of code from the instructions and pasting them into the Jupyter notebook. An example of what a code block looks like below. You can copy the code either by highlighting it and copying OR if you hover over the block a little clipboard symbol will appear to the right. If you click it it will copy the code. Try and copy the example block below.\n\n\nCode\nprint(\"I am a Python code block.\")\n\n\nI am a Python code block."
  },
  {
    "objectID": "01_primary_activity.html",
    "href": "01_primary_activity.html",
    "title": "Plotting with Python",
    "section": "",
    "text": "Graphs are extremely important for communicating data quickly and effectively. You might have created a graph in MicroSoft Excel before. When you do, you have to click around the software to modify the graph’s appearance and what data it uses. This might not take too much time if you’re only doing it once but what if you had to make similar graphs another ten times? A hundred times? Or a thousand times? The process would quickly get very boring, take a lot of time, and you’d be more likely to make mistakes!\nWe can use Python to write programs that plot our data. The program acts as instructions to create the graph. It’s very customisable and you can use the same code over and over again! Many of the graphs and visualisations you see in magazines, newspapers and social media are created using programming. Data scientists and statisticians create graphs to communicate data to doctors, politicians, CEOs, etc., to influence important decisions.\nIn this activity you are going to create your own graphs using Python.\nDon’t feel nervous if this is your first time using Python and you don’t understand all the code (this is a normal feeling for programmers too). You won’t be asked to write your own from scratch, only to edit what we give you.\n \n\n\n\nThe oldest human ever was a French woman named Jeanne Calment. She lived to the age of 122 years and 164 days. Whilst humans can be very long-lived, some animals can live even longer. Understanding what makes these animals live for so long could be important for letting us live longer and healthier lifespans. Below are some examples of long-lived animals:\n\n\n\n\n\nWe are going to create plots to show the maximum lifespan of various animals, both long-lived and short-lived. We will customise our plots in various ways.\nLearning objectives:\n\nTo understand which types of animals live the longest\nTo have an introduction to Python\nTo use Python to create plots of animal maximum ages\n\n\n\n\n\nPython does not know how to process and plot data on its own. Python packages contain additional commands that don’t come installed with Python, and allow us to carry out certain extra tasks. In this activity we’re going to need to load two packages known as pandas and matplotlib. Pandas is a package that lets python read and edit data, much like you’d use Excel to process raw data. Matplotlib is the package that then lets us plot the data. We can load them by pasting the following code into our first chunk and pressing the play button:\n\n\nCode\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n\nAs part of this code, we rename the packages to something shorter. ‘Matplotlib.pyplot’ is quite a lot of letters to type every time! Each time we used it we’d have to type:\nmatplotlib.pyplot.plot\n\nInstead, we can rename the package as we load it to something simple and easy to remember. In this case ‘plt’. So the above line of code would become:\nplt.plot\n\nIn summary, this is how we load and rename a package:\n\n\n\n\n\n\n\n\nNext we are going to load our animal ageing data. The data we’re going to be using can be found here. We are going to load it using the package mentioned earlier ‘pandas’. Remember, we have loaded ‘pandas’ and renamed it to ‘pd’.\n\nThe code to load the data is below.\n\n\nCode\n\ndata = pd.read_csv(\"https://raw.githubusercontent.com/CBFLivUni/scholars_event/refs/heads/main/data/animal_ageing_data.csv\") \n\n\nWe use the read_csv function contained inside the ‘pandas’ package to load the data at the url. We then store it in a variable called ‘data’ using the equals sign.\nWe can view the data by typing the name of the variable in a code chunk:\n\n\nCode\ndata\n\n\n\n\n\nThere are lots of rows and columns in our data. In the code below we will extract just the oldest animals from the data, and then we will print our their names and lifespans.\n\n\nCode\n# Find the top 8 longest living animals\noldest_animals = data.sort_values(\"Maximum longevity (yrs)\", ascending=False).head(8)\n\nprint(\"\\nThe 8 longest-living animals in this dataset are:\")\nprint(oldest_animals[[\"Common name\", \"Maximum longevity (yrs)\"]])\n\n\n\n\n\nThe 8 longest-living animals in this dataset are:\n\n\n          Common name  Maximum longevity (yrs)\n0   Ocean quahog clam                    507.0\n1     Greenland shark                    392.0\n2       Bowhead whale                    211.0\n3   Rougheye rockfish                    205.0\n4      Red sea urchin                    200.0\n5  Galapagos tortoise                    177.0\n6       Lake sturgeon                    152.0\n7               Human                    122.5\n\n\nIn this code we take our data and sort it in order of longevity. We tell it NOT to do it in ascending order by saying ascending=False. We take the top 8 by including head(8). We then save it in a new variable called ‘oldest animals’.\nAfter that, we print the two colums we are interested in (“Common name” and “Maximum longevity” (yrs)“). Do any of these animals surprise you?\n\n\n\n\n\n\nChallenges\n\n\n\n\nCan you modify the above code so that ‘oldest_animals’ has the 12 most long-lived animals instead?\nCan you make another variable called ‘shortest_lived_animals’ that has the 12 most short-lived animals?\n\n\n\n\n\n\n\nWe are now going to create a simple horizontal bar plot of the 12 most long-lived animals. In the code below:\n\nThe first line sets the size of the figure.\nThe second line creates a horiztonal bar plot (this is a normal bar plot rotated 90 degrees).\nThe third line tells Python to display the plot.\n\n\n\nCode\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"]) \nplt.show()\n\n\n\n\n\nSo far this is quite a simple plot, and it doesn’t have any labels or units for the x- and y- axes - this would be considered a poor graph in reality!\nWith matplotlib (our Python plotting package) we can keep adding layers of new information to our plot. We are now going to fill in the x- and y- axis. However, we have left the y-axis blank for you to fill in with a suitable name, for example ‘Animal’ or ‘Species’.\n\n\nCode\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"]) \nplt.xlabel(\"Maximum Lifespan (years)\") \nplt.ylabel(\"______\") # ← Label for y-axis\nplt.show()\n\n\n\n\n\n\n\nWe have now created a simple plot of animal longevity!\n\n\n\n\nOur graph above looks quite good but we might want to customise it more to our liking. We could first change the colours. We do this by passing an additional ‘argument’ to our command plt to let it know the colours we want to use. An example of changing all the colours of our graph is below. (Note: the spelling of ‘colour’ is American in python).\nWe have also added a title to our graph to explain what we are seeing.\n\n\nCode\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"], \n         color=[\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\", \"brown\", \"gray\", \"cyan\", \"teal\", \"magenta\"])\nplt.xlabel(\"Maximum Lifespan (years)\")\nplt.ylabel(\"Animal\")\nplt.title(\"Top 12 Longest-Living Animals in the Data\")\nplt.show()\n\n\n\n\n\n\nYou can use any colours you like to customise the graph. You just have to change the name of the colours inside the ‘color’ argument. The ones below all come included with matplotlib.\n\n\n\n\n\nAs well as the colours that come included, matplotlib lets you to pick any colour using a hexcode (a 6 character number/letter code after a hash/#).\nWe can create hexcodes for colours using some of these links:\n\nhttps://htmlcolorcodes.com/color-picker/\nhttps://color.adobe.com/create/color-wheel\nhttps://www.colorhexa.com/6738c9\nhttps://imagecolorpicker.com/en\n\nThe last link will allow you to create a colour palette from an image and give you the hex codes for the palette.\n\n\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\nCan you change the colours of the graph using the inbuilt colour names in matplotlib?\nCan you change the colours using hexcodes instead? Maybe you could pick colours that remind you of the animals? If you’re unsure what they look like then use Google to check. Otherwise, just select colours you like. ☺\n\n\n\nAnother way we can modify our graph is by using a different ‘theme’. Themes are different ways of styling the plot, for example background colour, default bar colours, fonts, gridlines, etc. Matplotlib comes with prepared styles that you can use to modify your graph.\nWe can then see a list of which styles we can use using this code:\n\n\nCode\nplt.style.available\n\n\n['Solarize_Light2', '_classic_test_patch', '_mpl-gallery', '_mpl-gallery-nogrid', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\n\n\nAn example of one of the styles applied to our graph is below:\n\n\nCode\nplt.style.use('ggplot')\n\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"])\nplt.xlabel(\"Maximum Lifespan (years)\")\nplt.ylabel(\"Animal\")\nplt.title(\"Top 12 Longest-Living Animals in the Data\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\nPick a style! Apply it to your graph instead of the one used in the example above. Try a few, which do you like best?\nCan you include a theme AND your custom colours?\n\n\n\nIf you don’t want to use a theme and prefer the default appearance, you can change it back at any time by running this block of code.\n\n\nCode\n\nplt.style.use('default')\n\n\n\n\n\n\n\n\n\n\n\nFinal challenge\n\n\n\n\nNow, using everything we’ve learned, can you modify the code to create a plot of the shortest-lived animals in the dataset - remember that earlier in the activity we created a variable storing the data called shortest_lived_animals.\n\nDon’t worry if this part proves tricky and ask the teachers for help at any point if you get stuck!\n\n\nWell done! You have now learned how to create a plot of using Python."
  },
  {
    "objectID": "01_primary_activity.html#introduction",
    "href": "01_primary_activity.html#introduction",
    "title": "Plotting with Python",
    "section": "",
    "text": "Graphs are extremely important for communicating data quickly and effectively. You might have created a graph in MicroSoft Excel before. When you do, you have to click around the software to modify the graph’s appearance and what data it uses. This might not take too much time if you’re only doing it once but what if you had to make similar graphs another ten times? A hundred times? Or a thousand times? The process would quickly get very boring, take a lot of time, and you’d be more likely to make mistakes!\nWe can use Python to write programs that plot our data. The program acts as instructions to create the graph. It’s very customisable and you can use the same code over and over again! Many of the graphs and visualisations you see in magazines, newspapers and social media are created using programming. Data scientists and statisticians create graphs to communicate data to doctors, politicians, CEOs, etc., to influence important decisions.\nIn this activity you are going to create your own graphs using Python.\nDon’t feel nervous if this is your first time using Python and you don’t understand all the code (this is a normal feeling for programmers too). You won’t be asked to write your own from scratch, only to edit what we give you."
  },
  {
    "objectID": "01_primary_activity.html#animal-ageing",
    "href": "01_primary_activity.html#animal-ageing",
    "title": "Plotting with Python",
    "section": "",
    "text": "The oldest human ever was a French woman named Jeanne Calment. She lived to the age of 122 years and 164 days. Whilst humans can be very long-lived, some animals can live even longer. Understanding what makes these animals live for so long could be important for letting us live longer and healthier lifespans. Below are some examples of long-lived animals:\n\n\n\n\n\nWe are going to create plots to show the maximum lifespan of various animals, both long-lived and short-lived. We will customise our plots in various ways.\nLearning objectives:\n\nTo understand which types of animals live the longest\nTo have an introduction to Python\nTo use Python to create plots of animal maximum ages\n\n\n\n\n\nPython does not know how to process and plot data on its own. Python packages contain additional commands that don’t come installed with Python, and allow us to carry out certain extra tasks. In this activity we’re going to need to load two packages known as pandas and matplotlib. Pandas is a package that lets python read and edit data, much like you’d use Excel to process raw data. Matplotlib is the package that then lets us plot the data. We can load them by pasting the following code into our first chunk and pressing the play button:\n\n\nCode\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n\nAs part of this code, we rename the packages to something shorter. ‘Matplotlib.pyplot’ is quite a lot of letters to type every time! Each time we used it we’d have to type:\nmatplotlib.pyplot.plot\n\nInstead, we can rename the package as we load it to something simple and easy to remember. In this case ‘plt’. So the above line of code would become:\nplt.plot\n\nIn summary, this is how we load and rename a package:\n\n\n\n\n\n\n\n\nNext we are going to load our animal ageing data. The data we’re going to be using can be found here. We are going to load it using the package mentioned earlier ‘pandas’. Remember, we have loaded ‘pandas’ and renamed it to ‘pd’.\n\nThe code to load the data is below.\n\n\nCode\n\ndata = pd.read_csv(\"https://raw.githubusercontent.com/CBFLivUni/scholars_event/refs/heads/main/data/animal_ageing_data.csv\") \n\n\nWe use the read_csv function contained inside the ‘pandas’ package to load the data at the url. We then store it in a variable called ‘data’ using the equals sign.\nWe can view the data by typing the name of the variable in a code chunk:\n\n\nCode\ndata\n\n\n\n\n\nThere are lots of rows and columns in our data. In the code below we will extract just the oldest animals from the data, and then we will print our their names and lifespans.\n\n\nCode\n# Find the top 8 longest living animals\noldest_animals = data.sort_values(\"Maximum longevity (yrs)\", ascending=False).head(8)\n\nprint(\"\\nThe 8 longest-living animals in this dataset are:\")\nprint(oldest_animals[[\"Common name\", \"Maximum longevity (yrs)\"]])\n\n\n\n\n\nThe 8 longest-living animals in this dataset are:\n\n\n          Common name  Maximum longevity (yrs)\n0   Ocean quahog clam                    507.0\n1     Greenland shark                    392.0\n2       Bowhead whale                    211.0\n3   Rougheye rockfish                    205.0\n4      Red sea urchin                    200.0\n5  Galapagos tortoise                    177.0\n6       Lake sturgeon                    152.0\n7               Human                    122.5\n\n\nIn this code we take our data and sort it in order of longevity. We tell it NOT to do it in ascending order by saying ascending=False. We take the top 8 by including head(8). We then save it in a new variable called ‘oldest animals’.\nAfter that, we print the two colums we are interested in (“Common name” and “Maximum longevity” (yrs)“). Do any of these animals surprise you?\n\n\n\n\n\n\nChallenges\n\n\n\n\nCan you modify the above code so that ‘oldest_animals’ has the 12 most long-lived animals instead?\nCan you make another variable called ‘shortest_lived_animals’ that has the 12 most short-lived animals?\n\n\n\n\n\n\n\nWe are now going to create a simple horizontal bar plot of the 12 most long-lived animals. In the code below:\n\nThe first line sets the size of the figure.\nThe second line creates a horiztonal bar plot (this is a normal bar plot rotated 90 degrees).\nThe third line tells Python to display the plot.\n\n\n\nCode\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"]) \nplt.show()\n\n\n\n\n\nSo far this is quite a simple plot, and it doesn’t have any labels or units for the x- and y- axes - this would be considered a poor graph in reality!\nWith matplotlib (our Python plotting package) we can keep adding layers of new information to our plot. We are now going to fill in the x- and y- axis. However, we have left the y-axis blank for you to fill in with a suitable name, for example ‘Animal’ or ‘Species’.\n\n\nCode\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"]) \nplt.xlabel(\"Maximum Lifespan (years)\") \nplt.ylabel(\"______\") # ← Label for y-axis\nplt.show()\n\n\n\n\n\n\n\nWe have now created a simple plot of animal longevity!\n\n\n\n\nOur graph above looks quite good but we might want to customise it more to our liking. We could first change the colours. We do this by passing an additional ‘argument’ to our command plt to let it know the colours we want to use. An example of changing all the colours of our graph is below. (Note: the spelling of ‘colour’ is American in python).\nWe have also added a title to our graph to explain what we are seeing.\n\n\nCode\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"], \n         color=[\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\", \"brown\", \"gray\", \"cyan\", \"teal\", \"magenta\"])\nplt.xlabel(\"Maximum Lifespan (years)\")\nplt.ylabel(\"Animal\")\nplt.title(\"Top 12 Longest-Living Animals in the Data\")\nplt.show()\n\n\n\n\n\n\nYou can use any colours you like to customise the graph. You just have to change the name of the colours inside the ‘color’ argument. The ones below all come included with matplotlib.\n\n\n\n\n\nAs well as the colours that come included, matplotlib lets you to pick any colour using a hexcode (a 6 character number/letter code after a hash/#).\nWe can create hexcodes for colours using some of these links:\n\nhttps://htmlcolorcodes.com/color-picker/\nhttps://color.adobe.com/create/color-wheel\nhttps://www.colorhexa.com/6738c9\nhttps://imagecolorpicker.com/en\n\nThe last link will allow you to create a colour palette from an image and give you the hex codes for the palette.\n\n\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\nCan you change the colours of the graph using the inbuilt colour names in matplotlib?\nCan you change the colours using hexcodes instead? Maybe you could pick colours that remind you of the animals? If you’re unsure what they look like then use Google to check. Otherwise, just select colours you like. ☺\n\n\n\nAnother way we can modify our graph is by using a different ‘theme’. Themes are different ways of styling the plot, for example background colour, default bar colours, fonts, gridlines, etc. Matplotlib comes with prepared styles that you can use to modify your graph.\nWe can then see a list of which styles we can use using this code:\n\n\nCode\nplt.style.available\n\n\n['Solarize_Light2', '_classic_test_patch', '_mpl-gallery', '_mpl-gallery-nogrid', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\n\n\nAn example of one of the styles applied to our graph is below:\n\n\nCode\nplt.style.use('ggplot')\n\nplt.figure(figsize=(10, 6))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"])\nplt.xlabel(\"Maximum Lifespan (years)\")\nplt.ylabel(\"Animal\")\nplt.title(\"Top 12 Longest-Living Animals in the Data\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\nPick a style! Apply it to your graph instead of the one used in the example above. Try a few, which do you like best?\nCan you include a theme AND your custom colours?\n\n\n\nIf you don’t want to use a theme and prefer the default appearance, you can change it back at any time by running this block of code.\n\n\nCode\n\nplt.style.use('default')\n\n\n\n\n\n\n\n\n\n\n\nFinal challenge\n\n\n\n\nNow, using everything we’ve learned, can you modify the code to create a plot of the shortest-lived animals in the dataset - remember that earlier in the activity we created a variable storing the data called shortest_lived_animals.\n\nDon’t worry if this part proves tricky and ask the teachers for help at any point if you get stuck!\n\n\nWell done! You have now learned how to create a plot of using Python."
  },
  {
    "objectID": "02_advanced_activities.html",
    "href": "02_advanced_activities.html",
    "title": "Advanced/additional activities",
    "section": "",
    "text": "Advanced/additional activities\nThis section is entirely optional and you should only attempt it if you have completed all the coding changes on the previous page.\nWhen we first looked at our dataset at the start it had columns containing extra information. One column of interest is “type”, which lets us know what type of animal they are (mammal, reptile, etc). Let’s manually inspect what type of animal the longest-lived animals are…\n\n\nCode\nprint(oldest_animals[[\"Type\", \"Common name\", \"Maximum longevity (yrs)\"]])\n\n\n          Type         Common name  Maximum longevity (yrs)\n0     Molluscs   Ocean quahog clam                    507.0\n1         Fish     Greenland shark                    392.0\n2      Mammals       Bowhead whale                    211.0\n3         Fish   Rougheye rockfish                    205.0\n4    Echinoids      Red sea urchin                    200.0\n5     Reptiles  Galapagos tortoise                    177.0\n6         Fish       Lake sturgeon                    152.0\n7      Mammals               Human                    122.5\n8      Mammals          Blue whale                    110.0\n9   Arthropods             Lobster                    100.0\n10     Mammals        Killer whale                     90.0\n11       Birds       Pink cockatoo                     83.0\n\n\nAre there any of these you haven’t heard of before?\nFor example, echinoids are animals that have a spikey hard shell. Echinoids evolved about 450 million years ago, which is about 220 million years before first dinosaurs appeared! Today we would commonly think of them as ‘sea urchins’ but there are plenty of fossils of ancient echinoids. Below is an artist’s rendition of one vs some red and black sea urchins.\n\n\n\n\n\nIt would be useful to colour our graph by the different animal types. This would give our colours more meaning and also allow us to see if there are any patterns in the data. First, we will store all the unique types of animals in a new variable called ‘types’. We can print ‘types’ to see what this includes.\n\n\nCode\ntypes = oldest_animals['Type']\n\nprint(types)\n\n\n0       Molluscs\n1           Fish\n2        Mammals\n3           Fish\n4      Echinoids\n5       Reptiles\n6           Fish\n7        Mammals\n8        Mammals\n9     Arthropods\n10       Mammals\n11         Birds\nName: Type, dtype: object\n\n\nNow we are going to create a colour map for the different types of animals.\nThis code is a little more complex so don’t try to understand all of it. To summarise, we first manually create a colour map for our different types of animals. Then we create a ‘list’, which is a type of information Python can work with to set the colours.\n\n\nCode\n\n# Pick a color for each type of animal\ncolor_map = {\n    'Molluscs': 'purple',\n    'Fish': 'blue',\n    'Mammals': 'orange',\n    'Echinoids': 'teal',\n    'Reptiles': 'green',\n    'Arthropods': 'pink',\n    'Birds': 'red'\n}\n\n# Create a list of colors based on each animal's type\nbar_colors = [color_map.get(t, 'gray') for t in types]\n\n\nWe can then use our colour map in our plotting code. This includes an aditional step where we manually add a legend too so we can see which colour corresponds to which type of animal. (Note, we have given a graph an alternative/more interesting title this time.)\n\n\nCode\n# Plot\nplt.figure(figsize=(10, 5))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"], color=bar_colors)\nplt.xlabel(\"Maximum Lifespan (years)\")\nplt.ylabel(\"Animal\")\nplt.title(\"How Long Do These Animals Live?\")\n\n# Add a legend manually\nlegend_labels = {v: k for k, v in color_map.items()}\nfor color in legend_labels:\n    plt.bar(0, 0, color=color, label=legend_labels[color])  # invisible bars for legend\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\nFrom this, we can see that many of the most long-lived animals in our dataset are mammals, in particular whales and humans! The longest-lived animal is a mollusc, but there is only one of them.\nThe full code to generate the graph is below:\n\n\nCode\ntypes = oldest_animals['Type']\n\n# Pick a color for each type of animal\ncolor_map = {\n    'Molluscs': 'purple',\n    'Fish': 'blue',\n    'Mammals': 'orange',\n    'Echinoids': 'teal',\n    'Reptiles': 'green',\n    'Arthropods': 'pink',\n    'Birds': 'red'\n}\n\n# Create a list of colors based on each animal's type\nbar_colors = [color_map.get(t, 'gray') for t in types]\n\n# Plot\nplt.figure(figsize=(10, 5))\nplt.barh(oldest_animals[\"Common name\"], oldest_animals[\"Maximum longevity (yrs)\"], color=bar_colors)\nplt.xlabel(\"Maximum Lifespan (years)\")\nplt.ylabel(\"Animal\")\nplt.title(\"How Long Do These Animals Live?\")\n\n# Add a legend manually\nlegend_labels = {v: k for k, v in color_map.items()}\nfor color in legend_labels:\n    plt.bar(0, 0, color=color, label=legend_labels[color])  # invisible bars for legend\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\nUsing the above code, can you modify the colour map and assign your own colours to the types of animals?\nCan you repeat the same steps as above to colour code the data for the shortest-lived animals? To help you we have provided some sample code below that you can modify.\n\n\n\n\n\nCode\n# Challenge 9 - check what types of animals there are\ntypes = shortest_lived_animals['Type']\n\nprint(types)\n# 5 unique types of animal: Arthropods, Birds, Fish, Amphibians, Mammals\n\n\n\n\nCode\n# Challenge 9 - create the colour map and graph\n\ncolor_map = {\n    '_____': '_____', # ← Enter types and colours in these blank spaces\n    '_____': '_____',\n    '_____': '_____',\n    '_____': '_____',\n    '_____': '_____'\n}\n\n# Create a list of colors based on each animal's type\nbar_colors = [color_map.get(t, 'gray') for t in types]\n\n# Plot\nplt.figure(figsize=(10, 5))\nplt.barh(shortest_lived_animals[\"Common name\"], shortest_lived_animals[\"Maximum longevity (yrs)\"], color=bar_colors)\nplt.xlabel(\"Maximum Lifespan (years)\")\nplt.ylabel(\"Animal\")\nplt.title(\"How Long Do These Animals Live?\")\n\n# Add a legend manually\nlegend_labels = {v: k for k, v in color_map.items()}\nfor color in legend_labels:\n    plt.bar(0, 0, color=color, label=legend_labels[color])  # invisible bars for legend\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\nIf you got this far then well done, that concludes all of our activities! If you enjoyed learning about animal ageing and want to browse the real website this data came from then check out AnAge."
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Introduction",
    "section": "",
    "text": "Attention!\n\n\n\nPlease open this link in a new tab and let it load, this may take a few minutes.\n\n\nThis is a short programming activity to teach you how to create plots using Python, in a real-life programming environment known as a Jupyter notebook. The session should run 60-90 minutes total.\n\n\n\n\nTake your time and read all the instructions on this page and the following pages - if you skip forward you may miss important information that can help you later\nTo copy code more easily you can highlight it and press ‘ctrl’ + ‘c’ on your keyboard at the same time\nTo paste code you can use the keyboard shortcut ‘ctrl’ + ‘v’\n\n\n\n\nFor much of this activity you will be copying blocks of code from the instructions and pasting them into the Jupyter notebook. An example of what a code block looks like below. You can copy the code either by highlighting it and copying OR if you hover over the block a little clipboard symbol will appear to the right. If you click it it will copy the code. Try and copy the example block below.\n\n\nCode\nprint(\"I am a Python code block.\")\n\n\nI am a Python code block."
  },
  {
    "objectID": "home.html#before-beginning",
    "href": "home.html#before-beginning",
    "title": "Introduction",
    "section": "",
    "text": "Attention!\n\n\n\nPlease open this link in a new tab and let it load, this may take a few minutes.\n\n\nThis is a short programming activity to teach you how to create plots using Python, in a real-life programming environment known as a Jupyter notebook. The session should run 60-90 minutes total."
  },
  {
    "objectID": "home.html#general-guidance-and-tips",
    "href": "home.html#general-guidance-and-tips",
    "title": "Introduction",
    "section": "",
    "text": "Take your time and read all the instructions on this page and the following pages - if you skip forward you may miss important information that can help you later\nTo copy code more easily you can highlight it and press ‘ctrl’ + ‘c’ on your keyboard at the same time\nTo paste code you can use the keyboard shortcut ‘ctrl’ + ‘v’"
  },
  {
    "objectID": "home.html#running-the-code",
    "href": "home.html#running-the-code",
    "title": "Introduction",
    "section": "",
    "text": "For much of this activity you will be copying blocks of code from the instructions and pasting them into the Jupyter notebook. An example of what a code block looks like below. You can copy the code either by highlighting it and copying OR if you hover over the block a little clipboard symbol will appear to the right. If you click it it will copy the code. Try and copy the example block below.\n\n\nCode\nprint(\"I am a Python code block.\")\n\n\nI am a Python code block."
  }
]